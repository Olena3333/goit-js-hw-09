{"mappings":"iiBAAA,IAUIA,EACAC,EACAC,EAZJC,EAAAC,EAAA,SAEMC,EAAU,CACdC,SAAU,gBACVC,QAAS,OACTC,kBAAmB,cA6BrB,SAASC,EAAcH,EAAUI,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEN,WAAUY,MAAAR,IAEpBG,EAAO,CAAEP,WAAUY,MAAAR,G,GAEpBA,E,IAnCQS,SAASC,cAAc,SAM/BC,iBAAiB,UAAU,SAAAC,GAChCA,EAAEC,iBACFvB,EAAQwB,OAAOF,EAAEG,cAAcC,SAASR,MAAMS,OAC9CzB,EAAOsB,OAAOF,EAAEG,cAAcC,SAASE,KAAKD,OAC5C1B,EAASuB,OAAOF,EAAEG,cAAcC,SAASG,OAAOF,OAChD,IAAK,IAAIG,EAAI,EAAGA,GAAK7B,EAAQ6B,GAAK,EAChCrB,EAAcqB,EAAG9B,GACd+B,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAU2B,EAAKD,EAALd,MACjBgB,EAAA/B,GAASgC,OAAOC,QAAQ,GAAiBC,OAAd/B,EAAS,OAAW+B,OAANJ,GAAS5B,GAClDiC,QAAQC,IAAI,uBAAwCF,OAAf/B,EAAS,QAAY+B,OAANJ,EAAM,M,IAE3DO,OAAM,SAAAR,G,IAAG1B,EAAQ0B,EAAR1B,SAAUmC,EAAKT,EAALd,MAClBgB,EAAA/B,GAASgC,OAAOO,QAAQ,GAAiBL,OAAd/B,EAAS,OAAW+B,OAANI,GAASpC,GAClDiC,QAAQC,IAAI,sBAAqCF,OAAf/B,EAAS,QAAY+B,OAANI,EAAM,M,IAE3DzC,GAASE,EAEXoB,EAAEG,cAAckB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst options = {\n  position: 'center-bottom',\n  distans: '15px',\n  cssAnimationStile: 'from-right',\n};\n\nconst formEl = document.querySelector('.form');\n\nlet delay;\nlet amount;\nlet step;\n\nformEl.addEventListener('submit', e => {\n  e.preventDefault();\n  delay = Number(e.currentTarget.elements.delay.value);\n  step = Number(e.currentTarget.elements.step.value);\n  amount = Number(e.currentTarget.elements.amount.value);\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`${position} - ${delay}`, options);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.warning(`${position} - ${delay}`, options);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n  e.currentTarget.reset();\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$step","$6JpON","parcelRequire","$ce04d3a99e08e73b$var$options","position","distans","cssAnimationStile","$ce04d3a99e08e73b$var$createPromise","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","document","querySelector","addEventListener","e","preventDefault","Number","currentTarget","elements","value","step","amount","i","then","param","delay1","$parcel$interopDefault","Notify","success","concat","console","log","catch","delay2","warning","reset"],"version":3,"file":"03-promises.332c96d8.js.map"}